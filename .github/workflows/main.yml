name: Helm-Release

on:
  push:
    paths:
      - charts/**
    

jobs:
  prep:
    runs-on: self-hosted
    outputs: 
        matrix: ${{ steps.set-matrix.outputs.matrix }}
        changes: ${{ steps.changed-files-specific.outputs.any_modified }}

    steps:
      - name: Checkout source code 
        uses: 'actions/checkout@v2'
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0

      - name: Get specific changed files   
        id: changed-files-specific
        uses: tj-actions/changed-files@v22.2
        with:
          files: ./charts/*
      
      - name: generate file list
        if: steps.changed-files-specific.outputs.any_modified == 'true'
        id: file-list
        uses: tj-actions/changed-files@v22.2
        with:
          path: ./charts/

      - name: List all changed files
        run: |
          echo "files were changed:${{ steps.changed-files-specific.outputs.any_modified }}"
          for file in ${{ steps.file-list.all_changed_and_modified_files }}; do
            echo "$file was changed"
          done

      - id: set-matrix
        if: steps.changed-files-specific.outputs.any_modified == 'true'
        run: | 
          declare var
          first_loop=1
          for file in ${{ steps.file-list.outputs.all_changed_and_modified_files }}; do
            value=$(basename $(dirname $file | sed -E 's|.*/charts/charts/(.*)|\1|'))
            (( $first_loop )) &&
            var=$value ||
            var="$var\n$value"
            unset first_loop
          done
          echo "$(printf "%s" "$var" | jq -Rrsc 'split("\\n") | unique')"
          echo "::set-output name=matrix::$(printf "%s" "$var" | jq -Rrsc 'split("\\n") | unique')"

        ## Make sure the heredoc is indented with tabs. NOT SPACES.
      - name: get all charts & create package.json if it does not exist
        id: packages
        run: |
            charts=$(find -type f -name Chart.yaml)
            for chart in $(find -type f -name Chart.yaml); do
            charthome=$(dirname $chart)
            package="${charthome}/package.json"
            if [ ! -f "${charthome}/package.json" ] || [ ! -s "${charthome}/package.json" ]; then 
            echo "${charthome}/package.json does not exist or is empty"
            echo "::set-output name=commitpackages::true"
            cat <<- EOF > ${charthome}/package.json 
            {
                "name": "$(basename $charthome)",
                "version": "0.0.1",
                "repository": {
                    "type": "git",
                    "url": "${{ github.repositoryUrl }}"
                },
                "homepage": "${{ github.server_url }}/${{ github.repository }}"
            }
            EOF
            fi
            done

      - name: commit the new package.json
        if: steps.packages.outputs.commitpackages == 'true'
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: Automated Change-- Generated package.json for charts that were missing it.
  release:
    needs: prep
    runs-on: self-hosted
    if: needs.prep.outputs.changes == 'true'
    strategy:
      matrix:
        manifest: ${{ fromJson(needs.prep.outputs.matrix) }}
    steps:
      - name: Checkout source code                   # Checkout source code
        uses: 'actions/checkout@v2'
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0
      - run: echo "${{ matrix.manifest }}"
      - name: 'cat package.json'
        run: cat ./charts/${{ matrix.manifest }}/package.json
      
      # - name: Automated Version Bump                      # Bump version in package.json
      #   id: version-bump
      #   uses: 'phips28/gh-action-bump-version@v9.0.20'
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     PACKAGEJSON_DIR: charts/${{ matrix.manifest }}
      #   with:
      #     skip-tag:  'true'
      #     commit-message: 'CI: Bump Helm chart version to {{version}}'

      # - name: update Chart.yaml                              # Update chart.yaml with new version and other fields
      #   working-directory: charts/${{ matrix.manifest }}
      #   run: |
      #     cat <<EOF > Chart.yaml
      #     name: ${{ matrix.manifest }}
      #     apiVersion: v2
      #     version: ${{ steps.version-bump.outputs.newTag }}
      #     appVersion: ${{ steps.package-version.outputs.current-version}}
      #     EOF
      - name: Run read-yaml action
        id: yaml-data
        uses: KJ002/read-yaml@main      # You may wish to replace main with a version tag such as '1.6' etc.
        with:
          file: './charts/${{ matrix.manifest }}/Chart.yaml'          # File to read from
          key-path: '["appVersion"]'
      - run: echo "${{ steps.yaml-data.outputs.data }}"
      - name: Bump Chart & App version
        uses: ./.github/actions/chart-version-bumper
        id: version-bump
        with:
          chart_name: ${{ matrix.manifest }}
          chart_version: ""
          app_version: ${{ steps.yaml-data.outputs.data }}
      
      - name: commit the new Charts
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: Automated Change

      - name: Run chart-releaser
        uses: helm/chart-releaser-action@v1.4.0
        env:
          CR_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
